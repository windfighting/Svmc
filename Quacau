Có 1 số cây cầu làm bằng gỗ. Trải qua 1 thời gian,những  cây cầu trở nên hư hại và xuất hiện những lỗ thủng trên đó. Được biết những cây cầu đó luôn có độ rộng M = 5(bước đi) và độ dài trong khoảng3

Công việc:

Có 1 người luôn luôn đứng giữa ở 1 phía của cây cầu. Nhiệm vụ của bạn là phải đưa người đó qua được cầu với số đồng xu nhặt được là lớn nhất. Được biết trên cầu có 1 số đồng xu bị đánh rơi và người đó chỉ có thể đi thẳng, đi chéo trái hoặc đi chéo phải. Ngoài ra người đó có mang 1 tấm ván. Nó có thể vá được 1 lỗ thủng trên cầu giúp người đó có thể đi qua được.

Lưu ý : không có nhiều hơn 1 đồng xu tại 1 địa điểm.

 

Input

Dòng đầu tiên là số lượng trường hợp thử nghiệm.

Dòng thứ 2 chiều dài của cây cầu (N).

N dòng tiếp theo mô tả cây cầu theo ma trận 2 chiều. Trong đó: ‘0’ là có thể đi được, ‘1’ là có đồng xu(có thể đi được)và ‘2’ là lỗ thủng.

 

Output

In theo định dạng  “#test_case” và số đồng xu nhiều nhất có thể khi qua đươc cầu.

Nếu không thể qua cầu in ra  -1.


3
7
1 2 0 1 0
0 0 2 0 1
0 1 0 2 1
1 0 0 0 1
0 0 0 2 2
2 0 1 0 1
0 1 2 2 0

10
2 2 2 2 0
1 2 0 0 2
0 2 0 0 0
2 2 0 2 2
0 2 2 2 0
0 0 0 0 0
1 0 0 0 2
0 0 0 0 0
2 2 0 2 1
0 2 2 2 0

9
0 2 1 1 2
0 2 2 2 2
2 2 2 1 0
0 0 2 0 2
0 2 2 1 0
1 0 2 2 2
2 2 0 2 0
2 2 2 0 2
0 0 2 0 0

Output

#1 6
#2 -1
#3 0

///////
#include <iostream>

using namespace std;
#define M 5
#define MaxN 1000

int N;
int dx[3] = {-1,-1,-1};
int dy[3] = {-1, 0, 1};
int mang[MaxN][M];
int check[MaxN][M];

int res;
int sum;

bool flag, checkout;

bool isSafe(int x, int y){
	if (x > 0 && x <= N && y > 0 && y <= M)
		return true;
	return false;
}

void bt (int x, int y, int cnt){
	if (x == 1){
		checkout = true;
		if (res < cnt) res = cnt;
	}

	for (int i = 0; i < 3; i++){
		int aa = x + dx[i];
		int bb = y + dy[i];

		if (isSafe(aa,bb) && check[aa][bb] ==0){
			if (mang[aa][bb] == 0){
				check[aa][bb] = 1;
				bt(aa,bb, cnt);
				check[aa][bb] = 0;
			}
			else if (mang[aa][bb] == 1){
				cnt++;
				check[aa][bb] = 1;
				bt(aa,bb,cnt);
				cnt--;
				check[aa][bb] = 0;
			}
			else if (mang[aa][bb] == 2 && flag == false){
				check[aa][bb] = 1;
				flag = true;
				bt(aa,bb,cnt);
				flag = false;
				check[aa][bb] = 0;
			}
		}
	}
}




int main(){
	freopen ("input.txt", "r", stdin);
	int T;
	cin >> T;
	for (int t = 1; t <= T; t++){
		cin >> N;

		for (int i = 0; i < N+2; i++){
			for (int j = 0; j < M+2; j++){
				mang[i][j] = 0;
				check[i][j] = 0;
			}
		}

		for (int i = 1; i <= N; i++){
			for (int j = 1; j <= M; j++){
				cin >> mang[i][j];
			}
		}
		
		res = 0;
		flag = false;
		checkout = false;
		int ans = 0;
		bt( N+1, 3, 0);

		if (checkout == false)
			ans = -1;
		else
			ans = res;

		

		cout <<"#"<< t<< " "<<ans<< endl;
	}
	return 0;
}


