#define _CRT_SECURE_NO_WARNINGS
#include <iostream> 
using namespace std ; 
int a[8][4] ; 
int visited[51][51];
int map[51][51]; 
int dxy[4][2] = { { -1, 0 }, { 0, 1 },
{ 1, 0 }, { 0, -1 } };;
int stack[100000][3];
int T, n, m, row, col, p, result, d, count1, f, r;
void init() {

	a[1][0] = 1;
	a[1][1] = 1;
	a[1][2] = 1;
	a[1][3] = 1;

	a[2][0] = 1;
	a[2][2] = 1;

	a[3][1] = 1;
	a[3][3] = 1;

	a[4][0] = 1;
	a[4][1] = 1;

	a[5][1] = 1;
	a[5][2] = 1;

	a[6][2] = 1;
	a[6][3] = 1;

	a[7][0] = 1;
	a[7][3] = 1;
}
void push(int x, int y, int c) {
	++r;
	stack[r][0] = x;
	stack[r][1] = y;
	stack[r][2] = c;
}

void pop() {
	f++;
	row = stack[f][0];
	col = stack[f][1];
	count1 = stack[f][2];
}
int cal() {
	int count1 = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (visited[i][j] != 0) {
				count1++;
			}
		}
	}
	return count1;
}
bool isValid(int x, int y) {
	if (x >= 0 && y >= 0 && x < n && y < m) {
		return true;
	}
	return false;
}
void bfs(int x, int y, int c) {
	push(x, y, c);
	visited[x][y] = 1;
	while (f != r) {
		pop();
		if (count1 == p - 1) {
			break;
		}
		for (int i = 0; i < 4; i++) {
			x = row + dxy[i][0];
			y = col + dxy[i][1];

			if (isValid(x, y) && visited[x][y] == 0) {
				if (a[map[row][col]][i] == 1 && a[map[row][col]][i] == a[map[x][y]][(i + 2) % 4]) {

					visited[x][y] = visited[row][col] + 1;
					push(x, y, count1 + 1);
				}
			}
		}
	}
}


int main() {
	//freopen("input.txt" , "r" , stdin) ; 
	cin >> T ; 
	init();
	for (int test_case = 1; test_case <= T; test_case++)
	{
		cin >> n >> m >> row >> col >> p ; 

		result = 0;
		//top = -1;
		f = r = -1;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				cin >> map[i][j] ;
			}
		}
		bfs(row, col, 0);
		cout << "Case #" << test_case << endl ;
		cout << cal() << endl ;
		for (int i = 0; i < n; i++) 
		{
			for (int j = 0; j < m; j++) 
			{
				visited[i][j] = 0 ; 

			}
		}
	}
	return 0 ; 
}
